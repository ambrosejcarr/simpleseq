#!/usr/local/bin/python3

import argparse
import simpleseq
import multiprocessing


def parse_args():
    p = argparse.ArgumentParser(description='merge annotations from drop-seq and in-drop')
    p.add_argument('platform', choices=['in_drop', 'drop_seq', 'mars1_seq', 'mars2_seq'],
                   help='which platform are you merging annotations from?')
    p.add_argument('-g', '--genomic-fastq', nargs='+', metavar='G',
                   help='fastq file(s) containing genomic information')
    p.add_argument('-b', '--barcode-fastq', nargs='?', metavar='B',
                   help='fastq file(s) containing barcode information')
    p.add_argument('-i', '--index', metavar='I', help='genome index folder')
    p.add_argument('-o', '--output-directory', metavar='O',
                   help='name of output directory')
    return p.parse_args()

if __name__ == '__main__':
    args = parse_args()
    merge_function = getattr(simpleseq.sequence.merge_functions, args.platform)
    if not args.output_directory.endswith('/'):
        args.output_directory += '/'
    output_file = args.output_directory + 'merged.fastq'
    merged = simpleseq.sequence.fastq.merge_fastq(
        merge_function=merge_function, fout=output_file, genomic=args.genomic_fastq,
        barcode=args.barcode_fastq)
    n_threads = multiprocessing.cpu_count() - 1
    simpleseq.sam.STAR.align(fastq_file=merged, index=args.index, n_threads=n_threads,
                             temp_dir=args.output_directory)

